beta = diag(1, ncol(safeTME))
beta = beta + runif(length(beta), 0, 0.1)
beta = sweep(beta, 2, colSums(beta), "/")
X = safeTME
Z = safeTME %*% beta
Xhat = Z %*% solve(beta)
par(mfrow = c(3,3))
par(mfrow = c(3,3))
for (i in 1:9) {
plot(Z[,i],Xhat[,i], log = "xy", cex = 0.3)
}
for (i in 1:9) {
plot(Z[,i],Xhat[,i], log = "none", cex = 0.3)
}
for (i in 1:9) {
plot(Z[,i],Xhat[,i], log = "", cex = 0.3)
}
par(mfrow = c(3,3))
for (i in 1:9) {
plot(Z[,i],Xhat[,i], log = "", cex = 0.3)
}
par(mfrow = c(3,3))
for (i in 1:9) {
plot(Z[,i],Xhat[,i], log = "xy", cex = 0.3)
}
for (i in 1:9) {
plot(Z[,i],X[,i], log = "xy", cex = 0.3)
}
min(Xhat)
Z = pmax(safeTME %*% beta + rnorm(length(Z), 0, 0.05), 0)
Xhat = Z %*% solve(beta)
par(mfrow = c(3,3))
for (i in 1:9) {
plot(Z[,i],Xhat[,i], log = "xy", cex = 0.3)
}
for (i in 1:9) {
plot(X[,i],Xhat[,i], log = "xy", cex = 0.3)
}
for (i in 1:9) {
plot(X[,i],Xhat[,i], log = "", cex = 0.3)
}
Z = pmax(safeTME %*% beta + rnorm(length(Z), 0, 0.01), 0)
Xhat = Z %*% solve(beta)
par(mfrow = c(3,3))
for (i in 1:9) {
plot(X[,i],Xhat[,i], log = "", cex = 0.3)
}
oldprofiles = safeTME
newprofiles = pmax(safeTME + rnorm(length(Z), 0, 0.01), 0)
res <- spatialdecon(norm = newprofiles,
bg = 0.5,
X = newprofiles)
res$beta
pheatmap(res$beta)
newprofiles = pmax(safeTME + rnorm(length(Z), .5, 0.1), 0)
res <- spatialdecon(norm = newprofiles,
bg = 0.5,
X = newprofiles)
res$beta
pheatmap(res$beta)
res <- spatialdecon(norm = newprofiles,
bg = 0.5,
X = cbind(newprofiles, 1))
res <- spatialdecon(norm = newprofiles,
bg = 0.5,
X = cbind(newprofiles, runif(nrow(newprofiles, 0, 1))))
head(cbind(newprofiles, runif(nrow(newprofiles, 0, 1))))
res <- spatialdecon(norm = newprofiles,
bg = 0.5,
X = cbind(newprofiles, runif(nrow(newprofiles), 0, 1)))
res$beta
res <- spatialdecon(norm = newprofiles,
bg = 0.5,
X = newprofiles[,-1])
res$beta
dim(res$beta)
beta <- sweep(res$beta, 2, colSums(res$beta), "/")
beta
# check that beta is mainly diagonal:
pheatmap(beta, cluster_rows = F, cluster_cols = F)
# check that beta is mainly diagonal:
diag(beta) # should all be close to 1.
beta
# check that beta is mainly diagonal:
diag(beta[,-1]) # should all be close to 1.
# estimate the component of each old profile in each new profile (i.e. estimate contamination):
res <- spatialdecon(norm = newprofiles,
bg = 0.5,
X = newprofiles)
res$beta
beta <- sweep(res$beta, 2, colSums(res$beta), "/")
# check that beta is mainly diagonal:
diag(beta) # should all be close to 1.
pheatmap(beta, cluster_rows = F, cluster_cols = F)
# now "decontaminate":
Z = newprofiles %*% solve(beta)
plot(Z[,1], oldprofiles[,1])
plot(oldprofiles[,1], Z[,1])
solve(beta)
beta %*% solve(beta)
solve(beta)
beta
oldprofiles = safeTME
beta = diag(1, ncol(safeTME))
beta = beta + runif(length(beta), 0, 0.1)
beta = sweep(beta, 2, colSums(beta), "/")
beta
beta = beta + runif(length(beta), 0, 0.05)
beta = diag(1, ncol(safeTME))
beta = beta + runif(length(beta), 0, 0.05)
beta = sweep(beta, 2, colSums(beta), "/")
newprofiles = pmax(safeTME %*% beta + rnorm(length(Z), .1, 0.02), 0)
for (i in 1:9) {
plot(oldprofiles[,i], newprofiles[,i], log = "xy", cex = 0.3)
}
par(mfrow = c(3,3))
for (i in 1:9) {
plot(oldprofiles[,i], newprofiles[,i], log = "xy", cex = 0.3)
}
# estimate the component of each old profile in each new profile (i.e. estimate contamination):
res <- spatialdecon(norm = newprofiles,
bg = 0.5,
X = newprofiles)
res$beta
# estimate the component of each old profile in each new profile (i.e. estimate contamination):
res <- spatialdecon(norm = newprofiles,
bg = 0.51
X = newprofiles)
# estimate the component of each old profile in each new profile (i.e. estimate contamination):
res <- spatialdecon(norm = newprofiles,
bg = 0.1,
X = newprofiles)
res$beta
beta <- sweep(res$beta, 2, colSums(res$beta), "/")
# check that beta is mainly diagonal:
diag(beta) # should all be close to 1.
pheatmap(beta, cluster_rows = F, cluster_cols = F)
# now "decontaminate":
cleanedprofiles = newprofiles %*% solve(beta)
par(mfrow = c(3,3))
for (i in 1:9) {
plot(oldprofiles[,i], newprofiles[,i], log = "xy", cex = 0.3)
points(oldprofiles[,i], cleanedprofiles[,i], col = 2, cex = 0.3)
}
for (i in 1:9) {
plot(oldprofiles[,i], newprofiles[,i], log = "xy", cex = 0.5)
points(oldprofiles[,i], cleanedprofiles[,i], col = 2, cex = 0.5)
}
par(mfrow = c(3,3))
for (i in 1:9) {
plot(oldprofiles[,i], newprofiles[,i], log = "xy", cex = 0.5)
points(oldprofiles[,i], cleanedprofiles[,i], col = 2, cex = 0.5)
}
for (i in 1:9) {
plot(oldprofiles[,i], newprofiles[,i], log = "xy", cex = 0.85)
points(oldprofiles[,i], cleanedprofiles[,i], col = 2, cex = 0.85)
}
# now "decontaminate":
cleanedprofiles = newprofiles %*% solve(res$beta)
par(mfrow = c(3,3))
for (i in 1:9) {
plot(oldprofiles[,i], newprofiles[,i], log = "xy", cex = 0.85)
points(oldprofiles[,i], cleanedprofiles[,i], col = 2, cex = 0.85)
}
abline(0,1)
200 + 33 + 68*2 + 10*2 + 6*2 + 18 + 40 + 80
install.packages("rlang")
install.packages("rlang")
library(devtools)
library(installr)
install.packages("installr")
library(installr)
sessioninfo()
sessionInfo()
sessionInfo()
install.packages("rlang")
install.packages("rlang")
# location of flat files:
flatfiledir <- "//nanostring.local/RND/analysis-files/pdanaher/vignette"
dir(flatfiledir)
# location of flat files:
flatfiledir <- "//nanostring.local/RND/analysis-files/pdanaher/vignette/flat files"
dir(flatfiledir)
# automatically get slide names:
filenames <- dir(flatfiledir)
onemetadatafilename
filenames <- dir(flatfiledir)
onemetadatafilename <- filenames[grepl("metadata", filenames)][1]
onemetadatafilename
metadatafilenames <- filenames[grepl("metadata", filenames)]
gsub("_metadata_file.csv.gz", "", metadatafilenames)
library(fread)
install.packages("fread")
library(fread)
slidename = slidenames[1]
filenames <- dir(flatfiledir)
metadatafilenames <- filenames[grepl("metadata", filenames)]
slidenames <- gsub("_metadata_file.csv.gz", "", metadatafilenames)
slidenames
slidename = slidenames[1]
temp = data.table::fread(paste0(flatfiledir, "/", slidename, "_metadata_file.csv.gz"))
str(temp)
annot <- sapply(slidenames, function(slidename) {
data.table::fread(paste0(flatfiledir, "/", slidename, "_metadata_file.csv.gz"))
})
str(annot)
temp = data.table::fread(paste0(flatfiledir, "/", slidenames, "_metadata_file.csv.gz"))
# load metadata, save as data frame:
annot <- sapply(slidenames, function(slidename) {
list(data.table::fread(paste0(flatfiledir, "/", slidename, "_metadata_file.csv.gz")))
})
str(annot)
length(annot)
# load metadata, save as data frame:
temp <- sapply(slidenames, function(slidename) {
list(data.table::fread(paste0(flatfiledir, "/", slidename, "_metadata_file.csv.gz")))
})
sharedcolumns <- colnames(temp[[1]])
sharedcolumns
sharedcolumns <- colnames(temp[[1]])
if (length(temp) > 1) {
for (i in 2:length(temp)) {
sharedcolumns <- intersect(sharedcolumns, colnames(temp[[i]]))
}
}
sharedcolumns
annot <- c()
for (i in 1:length(temp)) {
annot <- rbind(annot, temp[[i]][, sharedcolumns])
}
i
annot <- c()
for (i in 1:length(temp)) {
annot <- rbind(annot, temp[[i]][, ..sharedcolumns])
}
str(annot)
dim(annot)
unique(annot$slide_ID)
table(annot$slide_ID)
### load metadata, save as data frame:
temp <- sapply(slidenames, function(slidename) {
tempdatatable <- data.table::fread(paste0(flatfiledir, "/", slidename, "_metadata_file.csv.gz"))
tempdatatable$slidename <- slidename
return(list(tempdatatable))
})
str(temp)
tmp <- data.table::fread(paste0(flatfiledir, "/", slidename, "_exprMat_file.csv.gz"))
dim(tmp)
str(tmp)
triplets <- as.data.table(which(tmp != 0, arr.ind = TRUE))
triplets <- Matrix::as.data.table(which(tmp != 0, arr.ind = TRUE))
triplets <- data.table::as.data.table(which(tmp != 0, arr.ind = TRUE))
triplets$value <- tmp[triplets$V1, triplets$V2]
str(triplets)
### load raw counts, save as sparse matrix:
# load in counte matrices to a list:
temp <- sapply(slidenames, function(slidename) {
# load in counts as a data table:
countsdatatable <- data.table::fread(paste0(flatfiledir, "/", slidename, "_exprMat_file.csv.gz"))
# Convert to sparse matrix
triplets <- as.data.table(which(countsdatatable != 0, arr.ind = TRUE))
triplets$value <- countsdatatable[triplets$V1, triplets$V2]
out <- sparseMatrix(i = triplets$V1, j = triplets$V2, x = triplets$value)
return(list(out))
})
### load raw counts, save as sparse matrix:
# load in counte matrices to a list:
temp <- sapply(slidenames, function(slidename) {
# load in counts as a data table:
countsdatatable <- data.table::fread(paste0(flatfiledir, "/", slidename, "_exprMat_file.csv.gz"))
# Convert to sparse matrix
triplets <- data.table::as.data.table(which(countsdatatable != 0, arr.ind = TRUE))
triplets$value <- countsdatatable[triplets$V1, triplets$V2]
out <- sparseMatrix(i = triplets$V1, j = triplets$V2, x = triplets$value)
return(list(out))
})
library(Matrix) # for sparse matrices like our counts matrix
temp <- sapply(slidenames, function(slidename) {
# load in counts as a data table:
countsdatatable <- data.table::fread(paste0(flatfiledir, "/", slidename, "_exprMat_file.csv.gz"))
# Convert to sparse matrix
triplets <- data.table::as.data.table(which(countsdatatable != 0, arr.ind = TRUE))
triplets$value <- countsdatatable[triplets$V1, triplets$V2]
out <- Matrix::sparseMatrix(i = triplets$V1, j = triplets$V2, x = triplets$value)
return(list(out))
})
countsdatatable <- data.table::fread(paste0(flatfiledir, "/", slidename, "_exprMat_file.csv.gz"))
# Convert to sparse matrix
triplets <- data.table::as.data.table(which(countsdatatable != 0, arr.ind = TRUE))
triplets$value <- countsdatatable[triplets$V1, triplets$V2]
out <- Matrix::sparseMatrix(i = triplets$V1, j = triplets$V2, x = triplets$value)
str(triplets)
head(triplets)
(triplets)
triplets
# Convert to sparse matrix
triplets <- data.table::as.data.table(which(countsdatatable != 0, arr.ind = TRUE))
str(triplets)
?Matrix::sparseMatrix
library(Matrix)
?as.sparsematrix
# Convert to sparse matrix
triplets <- data.table::as.data.table(which(countsdatatable != 0, arr.ind = TRUE))
head(triplets)
triplets$value <- countsdatatable[triplets$row, triplets$col]
head(triplets)
out <- Matrix::sparseMatrix(i = triplets$row, j = triplets$col, x = triplets$value)
str(out)
out[1:10,1:10]
dim(countsdatatable)
head(triplets)
(triplets[1:30, ])
# load in counts as a data table:
countsdatatable <- data.table::fread(paste0(flatfiledir, "/", slidename, "_exprMat_file.csv.gz"))
# Convert to sparse matrix
triplets <- data.table::as.data.table(which(countsdatatable != 0, arr.ind = TRUE))
(triplets[1:30, ])
countsdatatable[1:10,1:10]
unique(table(countsdatatable$cellid))
unique(table(countsdatatable$cell_ID))
tempdatatable <- data.table::fread(paste0(flatfiledir, "/", slidename, "_metadata_file.csv.gz"))
unique(table(tempdatatable$cell_ID))
identical(tempdatatable$cell_ID,countsdatatable$cell_ID)
head(annot$cell_id)
head(annot$cell_ID)
metadatalist <- sapply(slidenames, function(slidename) {
tempdatatable <- data.table::fread(paste0(flatfiledir, "/", slidename, "_metadata_file.csv.gz"))
tempdatatable$slidename <- slidename
return(list(tempdatatable))
})
str(metadatalist)
str(countlist)
countlist <- sapply(slidenames, function(slidename) {
# load in counts as a data table:
countsdatatable <- data.table::fread(paste0(flatfiledir, "/", slidename, "_exprMat_file.csv.gz"))
rownames(counts)
# Convert to sparse matrix
triplets <- data.table::as.data.table(which(countsdatatable != 0, arr.ind = TRUE))
triplets$value <- countsdatatable[triplets$row, triplets$col]
out <- Matrix::sparseMatrix(i = triplets$row, j = triplets$col, x = triplets$value)
return(list(out))
})
countlist <- sapply(slidenames, function(slidename) {
# load in counts as a data table:
countsdatatable <- data.table::fread(paste0(flatfiledir, "/", slidename, "_exprMat_file.csv.gz"))
# Convert to sparse matrix
triplets <- data.table::as.data.table(which(countsdatatable != 0, arr.ind = TRUE))
triplets$value <- countsdatatable[triplets$row, triplets$col]
out <- Matrix::sparseMatrix(i = triplets$row, j = triplets$col, x = triplets$value)
return(list(out))
})
str(countslist)
fromi=1
i=1
metadata_cell_fov <- paste0(metadatalist[[i]]$fov, metadatalist[[i]]$cell_ID)
counts_cell_fov <- paste0(countlist[[i]]$fov, countlist[[i]]$cell_ID)
counts_cell_fov <- paste0(countlist[[i]][, "fov"], countlist[[i]][, "cell_ID"])
str(countlist[[i]])
(countlist[[i]])[1:5,1:5]
# load in counts matrix from each slide:
countlist <- sapply(slidenames, function(slidename) {
# load in counts as a data table:
countsdatatable <- data.table::fread(paste0(flatfiledir, "/", slidename, "_exprMat_file.csv.gz"))
return(list(countsdatatable))
## Convert to sparse matrix
#triplets <- data.table::as.data.table(which(countsdatatable != 0, arr.ind = TRUE))
#triplets$value <- countsdatatable[triplets$row, triplets$col]
#out <- Matrix::sparseMatrix(i = triplets$row, j = triplets$col, x = triplets$value)
#return(list(out))
})
counts_cell_fov <- paste0(countlist[[i]]$fov, countlist[[i]]$cell_ID)
match(metadata_cell_fov, counts_cell_fov)
countlist[[i]] <- countlist[[i]][match(metadata_cell_fov, counts_cell_fov), ]
countlist[[i]][1:5,1:5]
tmp <- countlist[[i]][, setdiff(colnames(countslist[[i]], c("fov", "cell_ID")))]
tmp <- countlist[[i]][, setdiff(colnames(countlist[[i]], c("fov", "cell_ID")))]
setdiff(colnames(countlist[[i]]), c("fov", "cell_ID"))
tmp <- countlist[[i]][, setdiff(colnames(countlist[[i]]), c("fov", "cell_ID"))]
dim(tmp)
str(tmp)
sharedgenes <- colnames(countlist[[1]])
if (length(countlist) > 1) {
for (i in 2:length(countlist)) {
sharedgenes <- intersect(sharedgenes, colnames(countlist[[i]]))
}
}
sharedgenes <- setdiff(sharedgenes, c("fov", "cell_ID"))
tmp <- countlist[[i]][, ..sharedgenes]
dim(tmp)
dim(countlist[[i]])
countlist[[i]] <- countlist[[i]][, ..sharedgenes]
# convert to sparse matrix:
triplets <- data.table::as.data.table(which(countsdatatable != 0, arr.ind = TRUE))
head(triplets)
head(countlist[[i]])
(countlist[[i]])[1:5,1:5]
head(triplets)
triplets <- data.table::as.data.table(which(countlist[[i]] != 0, arr.ind = TRUE))
triplets$value <- countlist[[i]][triplets$row, triplets$col]
head(triplets)
tmp <- Matrix::sparseMatrix(i = triplets$row, j = triplets$col, x = triplets$value)
str(tmp)
tmp[1:5,1:5]
countlist[[i]][1:5,1:5]
sharedcolumns <- colnames(metadatalist[[1]])
if (length(metadatalist) > 1) {
for (i in 2:length(metadatalist)) {
sharedcolumns <- intersect(sharedcolumns, colnames(metadatalist[[i]]))
}
}
sharedcolumns
### condense metadata to a single data table:
metadata <- sapply(metadatalist, rbind)
str(metadata)
dim(metadata)
str(metadatalist)
length(metadatalist)
### condense metadata to a single data table:
metadata <- c()
counts <- c()
for (i in 1:length(countlist)) {
counts <- rbind(counts, countlist[[i]])
metadata <- rbind(metadata, metadatalist[[i]])
}
#### load in metadata from each slide:
metadatalist <- sapply(slidenames, function(slidename) {
tempdatatable <- data.table::fread(paste0(flatfiledir, "/", slidename, "_metadata_file.csv.gz"))
tempdatatable$slidename <- slidename
return(list(tempdatatable))
})
#### get column names shared by all metadata files:
sharedcolumns <- colnames(metadatalist[[1]])
if (length(metadatalist) > 1) {
for (i in 2:length(metadatalist)) {
sharedcolumns <- intersect(sharedcolumns, colnames(metadatalist[[i]]))
}
}
# reduce to only shared columns:
for (i in 1:length(metadatalist)) {
metadatalist[[i]] <- metadatalist[[i]][, ..sharedcolumns]
}
### load in counts matrix from each slide:
countlist <- sapply(slidenames, function(slidename) {
# load in counts as a data table:
countsdatatable <- data.table::fread(paste0(flatfiledir, "/", slidename, "_exprMat_file.csv.gz"))
return(list(countsdatatable))
})
#### get shared genes:
sharedgenes <- colnames(countlist[[1]])
if (length(countlist) > 1) {
for (i in 2:length(countlist)) {
sharedgenes <- intersect(sharedgenes, colnames(countlist[[i]]))
}
}
sharedgenes <- setdiff(sharedgenes, c("fov", "cell_ID"))
#### align counts matrices to match metadata cell IDs, and convert to sparse matrices:
for (i in 1:length(countlist)) {
# align:
metadata_cell_fov <- paste0(metadatalist[[i]]$fov, metadatalist[[i]]$cell_ID)
counts_cell_fov <- paste0(countlist[[i]]$fov, countlist[[i]]$cell_ID)
countlist[[i]] <- countlist[[i]][match(metadata_cell_fov, counts_cell_fov), ]
# trim redundant columns:
countlist[[i]] <- countlist[[i]][, ..sharedgenes]
# convert to sparse matrix:
triplets <- data.table::as.data.table(which(countlist[[i]] != 0, arr.ind = TRUE))
triplets$value <- countlist[[i]][triplets$row, triplets$col]
countlist[[i]] <- Matrix::sparseMatrix(i = triplets$row, j = triplets$col, x = triplets$value)
}
### condense metadata to a single data table:
metadata <- c()
counts <- c()
for (i in 1:length(countlist)) {
counts <- rbind(counts, countlist[[i]])
metadata <- rbind(metadata, metadatalist[[i]])
}
dim(counts)
dim(metadata)
plot(metadata$CenterX_local_px, metadata$CenterY_local_px, cex = 0.1)
plot(metadata$CenterX_global_px, metadata$CenterY_global_px, cex = 0.1)
head(metadata$slidename)
install.packages("xfun")
install.packages("xfun")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
2^1.3
2^0.3
log2(1.231)
2^0.5
2^0.4
2^0.3
log2(1.25)
temp = read.csv("\\nanostring.local\\RND\\analysis-files\\pdanaher\\FOV effects breast/Hs_R_6K_Discovery_oligos_to_order.CSV")
setwd("~/GitHub/CosMx-Analysis-Scratch-Space/blog")
d = read.csv("Hs_R_6K_Discovery_oligos_to_order.CSV")
d = read.csv("Hs_R_6K_Discovery_oligos_to_order.CSV")
getwd()
setwd("~/GitHub/CosMx-Analysis-Scratch-Space/code/FOV QC")
d = read.csv("Hs_R_6K_Discovery_oligos_to_order.CSV")
head(d)
table(d$Panel)
table(d$Plate)
head(d[(d$Target == "B2M"), ])
source("~/GitHub/CosMx-Analysis-Scratch-Space/code/FOV QC/FOV QC utils.R")
sum(sub)
str(res)
2/49
