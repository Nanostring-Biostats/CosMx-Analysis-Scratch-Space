---
title: "`napari-cosmx` essentials"
author:
  - name: Evelyn Metzger
toc: true
toc-title: Contents
toc-depth: 3
toc-expand: 2
toc-location: left
number-sections: true
number-depth: 4
date: "2024-05-01"
categories: [napari]
draft: false
# image: figures/prostate.gif
code-fold: false
---

# Introduction 

<!-- alt intro -->
One of the things that I love about the `napari-cosmx` plugin is its duality. CosMx
data is spatial data and this means that viewing and interacting with it in a Graphical User
Interface makes sense. Once the data are stitched, just drag and drop into napari
and you can see your data come to life. For those interested in fine-tuning the
display aesthetics, for example, to make publication-quality figures, the plugin
functions are available. 

This post is the third installment of our napari-series. In the [first blog post](../using-napari-for-cosmx-data/index.qmd){target="_blank"} I introduced the
`napari-cosmx` plugin, how CosMx&#8482; Spatial Molecular Imager (SMI) data
can be viewed as layers within napari, and a method for processing, 
or "stitching", raw data that are exported from AtoMx&#8482; Spatial Informatics
Portal (SIP). In the [second post](../napari-programmatically-stitching/stitching-programmatically.qmd){target="_blank"}
I showed power users a way to stitch batches of raw data. In that post I also
provided a preview of the programmatic ways one can interact with their SMI data.

In this post, I'll walk through some of the basic ways in which we can use `napari-cosmx`
to view SMI data. This will be a combination of Graphical User Interface (GUI)
how-tos as well as programmatic tips-n-trick. Let's get started!

# The Example Dataset

If you would like to follow along using your own data export from SIP, you will
need to stitch them by creating your [napari-ready files](../using-napari-for-cosmx-data/index.qmd#sec-napari-ready-files){target="_blank"}.

The example dataset that I am using is the mouse coronal hemisphere
dataset that is available to downloaded from NanoString's website [here](https://nanostring.com/products/cosmx-spatial-molecular-imager/ffpe-dataset/cosmx-smi-mouse-brain-ffpe-dataset/){target="blank"}. We'll need to some slight file structure changes
to these raw data before we can stitch them because they are in a format that differs from the standard
AtoMx v1.3.2 export format. 

::: {.callout-note}
Stitching the example data on a laptop might not work for everyone. 
The raw data size for this example is 183 GBs. Not all raw data are needed to stitch
and users can exclude the `CellStatsDir/Morphology3D` folder if downloading locally.
If excluding this folder, the raw data is closer to 35 GBs. 

The computer I used to stitch was an M1 Macbook Pro. Processing this 130 FOV, mouse
1K data set took about 10 minutes, ~700%
CPU, and a peak memory usage of about 12 GBs (swap space was also used). The size
of the napari files combined was an additional 22 GBs of disk space. 
:::

Once downloaded, uncompress the `HalfBrain.zip` file on your computer. Stitching
can process with one of two approaches:

::: {.panel-tabset group="language"}

## GUI Approach

In your Finder window, create a folder named `mouse_brain`.  Move:

- `HalfBrain/AnalysisResult/HalfBrain_20230406_205644_S1/AnalysisResults` to `mouse_brain/AnalysisResults`
- `HalfBrain/CellStatsDir/HalfBrain_20230406_205644_S1/CellStatsDir` to `mouse_brain/CellStatsDir`
- `HalfBrain/RunSummary/HalfBrain_20230406_205644_S1/RunSummary` to `mouse_brain/RunSummary`

The folder structure should looks like this:

```
tree -f

├── ./HalfBrain
│   ├── ./HalfBrain/AnalysisResults
│   │   └── ./HalfBrain/AnalysisResults/cp7bjyp7pm
│   ├── ./HalfBrain/CellStatsDir
│   │   ├── ./HalfBrain/CellStatsDir/CellComposite
│   │   ├── ./HalfBrain/CellStatsDir/CellOverlay
│   │   ├── ./HalfBrain/CellStatsDir/FOV001
│   │   ├── ...
│   │   ├── ./HalfBrain/CellStatsDir/FOV130
│   │   ├── ./HalfBrain/CellStatsDir/Morphology2D
│   │   └── ./HalfBrain/CellStatsDir/RnD
│   ├── ./HalfBrain/RunSummary
│   │   ├── ./HalfBrain/RunSummary/Beta12_Affine_Transform_20221103.csv
│   │   ├── ./HalfBrain/RunSummary/FovTracking
│   │   ├── ./HalfBrain/RunSummary/Morphology_ChannelID_Dictionary.txt
│   │   ├── ./HalfBrain/RunSummary/Run1000_20230406_205644_S1_Beta12_ExptConfig.txt
│   │   ├── ./HalfBrain/RunSummary/Run1000_20230406_205644_S1_Beta12_SpatialBC_Metrics4D.csv
│   │   ├── ./HalfBrain/RunSummary/Shading
│   │   ├── ./HalfBrain/RunSummary/c902.fovs.csv
│   │   └── ./HalfBrain/RunSummary/latest.fovs.csv

```

Once you have that formatted, use the [stitching widget method](../using-napari-for-cosmx-data/index.qmd#sec-stitch-images){target="_blank"}
to create the mouse brain napari files. For this post, I named my output folder 
`mouse_brain_napari_files`.

## Terminal/Unix Approach

We can use `stitch-images` and `read-targets` within your virtual environment 
to directly stitch our napari files. For more info, see our
[previous post](../napari-programmatically-stitching/stitching-programmatically.qmd){target="_blank"}.


```{r}
#| label: stitching mouse brain programmatically
#| eval: false

conda activate napari_stitching
cd /into/your/project/folder
unzip /path/to/your/downloaded/HalfBrain.zip
outdir = "mouse_brain_napari_files"

stitch-images -i /path/to/HalfBrain/AnalysisResult/HalfBrain_20230406_205644_S1/AnalysisResults \ 
  -f /path/to/HalfBrain/RunSummary -o $outdir

read-targets /path/to/HalfBrain/AnalysisResults -o $outdir

```

To do. Run through this method and capture timing and CPU/RAM usage.

We will also use the cell typing data from the Seurat file. 

```{r}
#| label: extracting-seurat-data
#| echo: true
#| eval: false
#| message: true
#| warning: false

# This is R code
library(Seurat)
library(plyr)
library(dplyr)
# sem_path will be wherever you downloaded your Seurat object
sem_path <- "/path/to/your/muBrainRelease_seurat.RDS"
#sem_path <- "/Volumes/Extreme_Pro/data/HalfBrain/muBrainRelease_seurat.RDS"
sem <- readRDS(sem_path)
meta <- sem@meta.data
meta <- meta %>% select(starts_with("RNA_nbclust")) %>% select(ends_with("clusters"))
colnames(meta)[1] <- 'cell_types'
meta$cell_ID <- row.names(meta) # adds cell_ID column
rownames(meta) <- NULL
meta <- meta %>% relocate(cell_ID) # moves cell_ID to first column position
write.table(meta, file="/path/to/inside/napari-ready-folder/_metadata.csv", 
            sep=",", col.names=TRUE, row.names=FALSE, quote=FALSE)
write.table(meta, file="/Volumes/Extreme_Pro/data/HalfBrain/mouse_brain_napari_files/_metadata.csv", 
            sep=",", col.names=TRUE, row.names=FALSE, quote=FALSE)
```

:::


<!-- ## Formatting the example data -->

The data come in a variety of formats though napari
is not one of them. We therefore must download the `Coronal Hemisphere Raw Data Export` and use the technique from [this blog post](../napari-programmatically-stitching/stitching-programmatically.qmd){target="_blank"}
to create the napari-ready files. We will also make use of the cell typing data from
the `Seurat Object`.

<!-- wget https://smi-public.objects.liquidweb.services/muBrainRelease_seurat.RDS -->

