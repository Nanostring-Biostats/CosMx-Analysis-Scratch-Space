---
title: "Getting Started with the `napari-cosmx` plugin"
author:
  - name: Evelyn Metzger
    affiliations: 
      - ref: nstg
      - ref: eveilyeverafter
affiliations:
  - id: nstg
    name: NanoString Technologies, Inc.
    city: Seattle
    state: WA
  - id: eveilyeverafter
    name: "Github: [@eveilyeverafter](https://github.com/eveilyeverafter)"
toc: true
toc-title: Contents
toc-depth: 3
toc-expand: 2
toc-location: left
number-sections: true
number-depth: 4
date: "2024-04-19"
categories: [visualization, napari]
draft: false
image: figures/prostate.gif
---

```{r}
#| eval: true
#| echo: false
#| label: "fig-pancreas"
#| fig-cap: "Nine Fields of View (FOVs) of a whole-transcriptome Pancreas dataset visualized with the `napari-cosmx` plugin. DAPI and PanCK is shown in blue and green, respectively. Endocrine cells in the Islets of Langerhans can be identified by their transcript abundance of marker genes (points). Red = _GCG_ (alpha cells), orange = _INS_ (beta cells), cyan = _SST_ (delta cells)."

knitr::include_graphics("./figures/pancreas.png")
```

# Introduction 

The AtoMx&#8482; Spatial Informatics Portal (SIP) is an excellent solution for analyzing 
multi-omics spatial data generated on the CosMx&#8482; Spatial Molecular Imager (SMI).
It offers seamless integration of data analysis with a data viewer in an intuitive 
web-based interface. 

For bespoke analyses, however, it can be useful to extract SMI image and transcript or 
protein data from the SIP. Version 1.3 of the SIP introduced new exporting abilities that allow
raw data and processed data in a variety of formats (_e.g._, Seurat, tiledb, "flat files") 
to be downloaded. Still, how do we actually _view_ and interact with the images from these downloads?

This blog post is the first in our series on using our
`napari-cosmx` plugin. Like other items in our [CosMx Analysis Scratch Space](https://nanostring-biostats.github.io/CosMx-Analysis-Scratch-Space/about.html){target="_blank"},
the `napari-cosmx` plugin is experimental so the usual [caveats](https://nanostring-biostats.github.io/CosMx-Analysis-Scratch-Space/about.html){target="_blank"} and [license](https://nanostring-biostats.github.io/CosMx-Analysis-Scratch-Space/license.html){target="_blank"} applies.
Future posts will do deep-dives into _using_ the `napari-cosmx` plugin. This post will
show you how to:

- @sec-installing Install napari and the `napari-cosmx` plugin 
- @sec-napari-ready-files Describe what our "napari-ready" data format is 
- @sec-loading-slides How to load a napari-ready slide 
- @sec-stitching How to create a napari-ready slide from AtoMx raw data export 
- @sec-adding-metadata Minimum example of how to view cell-level metadata 

::: {.callout-note}
`napari-cosmx` is actively and continuously under development in the RnD groups at
NanoString. We do not (yet) have the source code for `napari-cosmx` opened-sourced.
Please be aware that there may be bugs and that it has not gone through the regular
level of quality and testing. Our goal here is to bring the capabilities of napari
to CosMx users as fast as possible.
:::

## What is Napari?

Stepping back for a second. What exacty _is_ Napari. [Napari](https://napari.org/){target="_blank"}
is an [open-source](https://github.com/napari/napari){target="_blank"} Python project that runs a 
Qt-based desktop GUI for interactive visualization of scientific images. 
The application has layers of different types, similar to what you might find
in application like Photoshop or Procreate. 

## What is the `napari-cosmx` plugin?

Tissue morphology layers generated by CosMx SMI are displayed as image layers 
in napari, and standard controls are available such as opacity, gamma, and contrast
limits. Protein results are also viewed as an image layer in napari. For CosMx 
RNA experiments, the detected transcripts are viewed as a points layer in napari.
Cell segmentation results are displayed as an image layer of the cell boundaries.
The cell shapes can also be colored by metadata such as cell type. @fig-example-gif
shows some examples of these in an animated format. 

```{r}
#| eval: true
#| echo: false
#| label: "fig-example-gif"
#| fig-cap: "Example animation made with `napari-cosmx` showing ligand-receoptor interactions in a healthy prostate sampele. Cell types fill in the cell boundaries. When cells are transparent, one can see more easily see the spatial location of _S100A8_, _S100A9_ ligand RNA transcripts with the _TLR4_ receptor transcript. While animations are certainly not needed for all purposes, this one highlights that the plugin can color RNA transcripts (points layer), cell-level metadata like cell types, and cell boundaries. It can also visualize IF (not shown here; see @fig-pancreas for example of IF staining)." 

knitr::include_graphics("./figures/prostate.gif")
```

Beyond the basic interactivity and viewing of napari, other posts in this series
will provide examples of tips and tricks as well as more advanced analysis. See the 
[series topics](https://nanostring-biostats.github.io/CosMx-Analysis-Scratch-Space/about.html) for what's coming ahead!


# Using the `napari-cosmx` plugin 


::: {.callout-note}
While napari and the `napari-cosmx` can be installed on many systems, CosMx data
can be quite large. A slide with a large number of FOVs may very well exceed the
capabilities of a standard laptop.
:::


## Installing `napari-cosmx` {#sec-installing}

The specific download instructions depend on your operating system (see tabs below)
but the general procedure is the same: 1) installing napari 0.4.17 and 2) installing the `napari-cosmx` plugin

::: {.callout-note}
The `napari-cosmx` plugin was developed with napari 0.4.17. There are some breaking
changes that we have noticed if using the plugin with newer version of napari (_e.g._,
0.4.18). At the time of writing this post, please make sure to install version 0.4.17. 

:::

::: {.panel-tabset}

### Windows Install

::: {.callout-note}
Depending on your browser and security settings you may get warnings when downloading or running some of the links below.
:::

#### Part 1: Installing Napari

:::: {.columns}

::: {.column width="45%"}

The napari project contains platform-specific bundled apps for each release that
donâ€™t require you to first install a Python environment. You simply run the installer
and a link will be added to your Start Menu as with a typical app installation. 
The napari-CosMx plugin currently expects napari 0.4.17.

[Click to download the Windows Installer](https://github.com/napari/napari/releases/download/v0.4.17/napari-0.4.17-Windows-x86_64.exe)

:::

::: {.column width="5%"}
<!-- empty column to create gap -->
:::

::: {.column width="40%"}

```{r}
#| eval: true
#| echo: false
#| label: "fig-windows-installer"
#| fig-cap: "The Windows Installer."

knitr::include_graphics("./figures/windows_installer.png")
```

:::

#### Part 2: Installing `napari-cosmx`

1. Download the whl file (**need a location for this**). 
2. Go to the folder where the `whl` file is in your File Explorer and choose 
`Copy Path`.
2. Now launch napari from the Start menu in Windows. 

> Pro tip: If launching for the first time, the application may take a moment to appear. Avoid launching multiple instances. 

3. In napari, open up the `>_` button that is located on the bottom left (see @fig-windows-plugin-command for example). 
4. Type `pip install ` into the console (_i.e._, with a single space after the word 'install').
5. Paste the location of the `whl` file
6. Press enter to execute
7. You should receive a message in the console that several packages were successfully
installed including the `napari-cosmx` package. 
8. **Close and re-start napari**

```{r}
#| eval: true
#| echo: false
#| label: "fig-windows-plugin-command"
#| fig-cap: "Example showing how to install the `napari-cosmx` file. Your file name and path will look different."

knitr::include_graphics("./figures/windows_plugin_command.png")
```


::::




### MacOS/Unix Install

::: {.callout-note}
Depending on your browser and security settings you may get warnings when downloading or running some of the links below.
:::

#### Part 1: Installing Napari

Visit the napari [0.4.17 release page](https://github.com/napari/napari/releases/tag/v0.4.17){target="_blank"}. 
Scroll all the way to the bottom and expand the section that says "Assets" (@fig-mac-pkg-download). 
Download the `pkg` file that is appropriate for your operating system (_i.e._, 
`napari-0.4.17-macOS-x86_64.pkg` for Mac). Open the downloaded file and install 
via the instructions on screen (you can accept the defaults). When finished, 
launch napari via the Applications folder. 

> Pro tip: If launching for the first time, the application may take a moment to appear. Avoid launching multiple instances. 

```{r}
#| eval: true
#| echo: false
#| label: "fig-mac-pkg-download"
#| fig-cap: "Screenshot of napari packages. Blue highlighted package is appropriate for Mac. Other operating systems' packages are also available but untested."

knitr::include_graphics("./figures/mac_install_pkg.png")
```



#### Part 2: Installing `napari-cosmx`

1. In napari, open up the `>_` button that is located on the bottom left (see @fig-mac-plugin-command for example). 
2. Type `pip install ` into the console (_i.e._, with a single space after the word 'install').
3. Paste the location of the `whl` file
4. Press enter to execute
5. You should receive a message in the console that several packages were successfully
installed including the `napari-cosmx` package. 
6. **Close and re-start napari**

```{r}
#| eval: true
#| echo: false
#| label: "fig-mac-plugin-command"
#| fig-cap: "Example showing how to install the `napari-cosmx` file. Your file name and path will look different."

knitr::include_graphics("./figures/mac_plugin_command.png")
```

:::


## Napari-ready slide folder {#sec-napari-ready-files}

The `napari-cosmx` plugin expects a single slide that has been prepared using the
`stitching` (@sec-stitching) method within the plugin itself. If you do not already
have a napari-ready slide, you can download a two-FOV example that we have created
[here (to do: need to link the two-fov file)](){target="_blank"}. This two-FOV dataset
was derived from the coronal hippocampus and
cortex public dataset. The full data download is not needed for our current purposes but
those interested in exploring the full data can download it  [here](https://nanostring.com/resources/coronal-hippocampus-and-cortex-raw-data-export/){target="_blank"}). 

At the very minimum, the napari-ready slide folder contains two elements: 

1. `images` folder. Within the `images` folder, there are subfolders for each Immunofluorescence channel and one folder for the cell boundaries (`labels`). 
2. `targets.hdf5` file that contains the RNA (or protein) targets. 

And example can be see below (@fig-napari-ready-folder).

```{r}
#| eval: true
#| echo: false
#| label: "fig-napari-ready-folder"
#| fig-cap: "Example layout of a napari-ready folder. In this example, the 'parent folder' (_i.e._, the folder you would drag and drop into napari) is named `two_fovs_napari_files` and contains the `images` folder with subfolders containing various zarr files within and the `targets.hdf5` file."

knitr::include_graphics("./figures/napari-ready-format.png")
```

We can also create a file named `_metadata.csv` that can be used for cell-level
labeling. For more information on that, please see @sec-adding-metadata. 

## Loading a slide into `napari-cosmx` {#sec-loading-slides}

::: {.callout-note}
You may have noticed that I put this section _before_ the section on how to 
create (or 'stitch') napari-ready files. This is due to the current implimentation
of the `napari-cosmx` codebase. Specifically, this is because the widget used
for stitching is available once we launch the plugin. So in order to be able to
stitch, we need to have _some_ pre-exisiting slide to load into the plugin. There
are advanced ways that we could get around this limitation but that's an 
advanced topic for another day.
:::

To launch and view CosMx data with the `napari-cosmx`: 

1. Navigate to a napari-ready slide folder. If you need a minimum example, see @sec-napari-ready-files above.
2. Open napari from the Start Menu (Windows) or the Application folder (Mac).
3. Drag the parent folder of the slide into the the napari application. If you
are using the two-FOV example above, this would be the folder named `two_fovs_napari_files`. 
Otherwise, the napari-ready folder is whichever folder containing `images` and `targets.hdf5` (see @sec-napari-ready-files).
4. napari will ask if you would like to open via the `napari-cosmx` plugin or another
method. Select the `napari-cosmx` plugin and press okay. 


## How to create slides from Raw data {#sec-stitching}

At the time of writing, the process to _create_ napari ready files follows this framework: 

1. Export Raw data from AtoMx SIP (v1.3+) (@sec-export-raw-data)
2. Launch `napari-cosmx` within napari (@sec-launch-napari-cosmx)
3. Use the stitch widget to create napari-ready slide from raw data (@sec-stitch-images)

::: {.callout-note}
One of the main advantages of AtoMx SIP is that the data are stored for you. 
However, `napari-cosmx` currently requires the raw data downloaded and stored **locally**. Raw data can 
be quite large (100s of GBs per slide). It is possible
to store the data on a networked drive but we have noticed that stitching performance
is slower, depending on your network speed. Storing the data on a high-capacity and
fast I/O external hard drive may also be an option. 
:::



### 1. Export Raw Data {#sec-export-raw-data}

In AtoMx SIP, in the `Study details` panel on the upper left, click `Export` (@fig-atomx-export1). 

```{r}
#| eval: true
#| echo: false
#| label: "fig-atomx-export1"
#| fig-cap: "Click `Export` (available in AtoMx SIP version 1.3+)."

knitr::include_graphics("./figures/export-fig1.png")
```

Configure your export with the options indicated in @fig-atomx-export2 and click `EXPORT`. If you
would like to view metadata (optional). You can go ahead and download the Seurat data
now or as a separate step (_i.e._, Seurat data is not needed for stitching napari
files). 

```{r}
#| eval: true
#| echo: false
#| label: "fig-atomx-export2"
#| fig-cap: "Example configuration for exporting. For more information on extracting cell-level metadata, see @sec-adding-metadata."

knitr::include_graphics("./figures/export-fig2.png")
```

When the export is ready, download the data. You can do this over the sftp 
protocol in a variety of application. Here, I'm using [Cyberduck](https://cyberduck.io/){target="_blank"} but you can use other programs. 

In Cyberduck, click `Open Connection`. In the dropdown menu, select `SFTP` and 
enter the URL, username, and your (AtoMx) password. Then click `Connect`. Example:
@fig-atomx-export3.

```{r}
#| eval: true
#| echo: false
#| label: "fig-atomx-export3"
#| fig-cap: "Example configuration for Cyberduck SFTP."

knitr::include_graphics("./figures/export-fig3.png")
```

Once connected, find the relevant folder, right click, and select `Download As...` (@fig-atomx-export4). 
Choose the location to on your computer to store the data. You may be able to store
it on a networked drive but this is currently untested. 

```{r}
#| eval: true
#| echo: false
#| label: "fig-atomx-export4"
#| fig-cap: "Download raw data somewhere on your desktop."

knitr::include_graphics("./figures/export-fig4.png")
```

### 2. Launch `napari-cosmx` {#sec-launch-napari-cosmx}

In order to use the stitching widget in the plugin, we must first launch the 
plugin. Currently, the only way to do that is to load an existing napari-ready 
folder. This can be any napari slide (_e.g._, a previous study or the two-FOV 
example described in @sec-napari-ready-files).

### 3. Stitching images {#sec-stitch-images}

Once `napari-cosmx` is launched, the stitching widget is located on the right-hand
panel (@fig-stitch-widget1). 

```{r}
#| eval: true
#| echo: false
#| label: "fig-stitch-widget1"
#| fig-cap: "Example showing a launched `napari-cosmx` plugin with a possibly-unrelated slide. To stitch, a new slide, Click `Browse...` in the `Stitch Images` widget located on the right-hand side of napari."

knitr::include_graphics("./figures/stitch-widget1.png")
```

We need to tell `napari-cosmx` where the raw data is located. In the right-hand panel
there is a `Stitch Images` widget. Click `Browse...` and navigate to the parent folder
containing the slide's raw data. In our minimum example above with two FOVs, I have named
the parent folder `two_fovs` (@fig-stitch-widget2). Your slide name will be labeled something else. 
Once you select `Open`, you should see the path to the raw data folder. If an unexpected format
was detected, there will be an error message (_e.g._, @fig-stitch-widget3).

```{r}
#| eval: true
#| echo: false
#| label: "fig-stitch-widget2"
#| fig-cap: "Example showing a launched `napari-cosmx` plugin with a possibly-unrelated slide. To stitch, a new slide, Click `Browse...` in the `Stitch Images` widget located on the right-hand side of napari."

knitr::include_graphics("./figures/stitch-widget2.png")
```

```{r}
#| eval: true
#| echo: false
#| label: "fig-stitch-widget3"
#| fig-cap: "Stitching widget prints the path to the correctly formatted raw data (left) or provides an error message if not formatted correctly (right). Note that only the correctly formatted location can proceed to the next step (choosing otuput folder)."

knitr::include_graphics("./figures/stitch-widget3.png")
```

Next, select the location where you want the plugin to return the napari-ready files.
It is recommend not to store it in the same location as the raw data. Here, I'm 
pointing it to a location adjacent to the raw data that I named `two_fovs_napari_files`
(@fig-stitch-widget4).

```{r}
#| eval: true
#| echo: false
#| label: "fig-stitch-widget4"
#| fig-cap: "Select output folder."

knitr::include_graphics("./figures/stitch-widget4.png")
```

Finally, click `Stitch`. Note: currently there is no refreshing or printing of
messages. Please do not click `Stitch` more than once. You may see napari become
unresponse, see the "spinning beachball" (Mac), _etc._ Depending on the number 
of FOVs, computer configuration, and analyte type, this can take several minutes. 
Once complete, you should
see messages that resemble that of @fig-stitch-widget5. If you see the last line
`See output folder for results`, you successfully converted the raw data into napari-ready files!

To view the results, simply close napari, reopen it, and drag your newly created results
into the application. 

```{r}
#| eval: true
#| echo: false
#| label: "fig-stitch-widget5"
#| fig-cap: "Messages from a successfully completed stitching run."

knitr::include_graphics("./figures/stitch-widget5.png")
```



## Adding and viewing metadata {#sec-adding-metadata} 

While we'll have dedicated posts that discuss tips and tricks for using the
`napari-cosmx` plugin, here we'll discuss one of the most powerful uses: viewing 
cells types. 

While not needed for the basic stitching, the Seurat file that is downloaded
from AtoMx can containing important cell-level information. For example, 
if cell typing was performed in AtoMx, each cell will have a label with it's cell
type. 

In this section, I'll show you the basic principle for converting the meta data
within the Seurat object in to a csv file that can be understood by `napari-cosmx`. 
Users should have a basic understanding of R in order to use this feature. We'll
also need to switch our example dataset since the minimal two-FOV example dataset
was from raw data and not analyzed in AtoMx so we don't have any cell-level cell type
information. Here, the specific column of interest will have the prefix `RNA_nbclust` and suffix
`clusters`. In the code below, we'll change that name to simply `cell_types`. We'll
also need a column named `cell_ID` in the metadata column. We need to write
the metadata columns to a file specifically named `_metadata.csv` and have that
file located in the napari-ready folder.  


```{r}
#| label: extracting-seurat-data
#| echo: true
#| eval: false
#| message: true
#| warning: false

# This is R code
library(Seurat)
library(plyr)
library(dplyr)
# sem_path will be wherever you downloaded
sem_path <- "/path/to/your/seuratObject.RDS"
sem <- readRDS(sem_path)
meta <- sem@meta.data
meta <- meta %>% select(starts_with("RNA_nbclust")) %>% select(ends_with("clusters"))
colnames(meta)[1] <- 'cell_types'
meta$cell_ID <- row.names(meta) # adds cell_ID column
rownames(meta) <- NULL
meta <- meta %>% relocate(cell_ID) # moves cell_ID to first column position
write.table(meta, file="/path/to/inside/napari-ready-folder/_metadata.csv", 
            sep=",", col.names=TRUE, row.names=FALSE, quote=FALSE)
```


Now, when we drag and drop the napari-ready folder, the metadata that you extracted
from Seurat
will be available to view using the right-hand widget named `Color Cells` (@fig-color-cells). 

```{r}
#| eval: true
#| echo: false
#| label: "fig-color-cells"
#| fig-cap: "When metadata are available in the _metadata.csv file, it's possible to color cells based on a cell-level metadata value (_e.g._, cell types)."

knitr::include_graphics("./figures/color-cells.png")
```


# Conclusion

In this post we introduced the `napari-cosmx` plugin, a tool that can be use to
interact with exported CosMx SMI data from AtoMx SIP. Our focus was on installation
and launching the application. In future posts we'll do deep-dives on usuage and
share tips and tricks that we've learned along the way. If you would like to see
a napari topic discussed, please create an issue or feature request on [github](https://github.com/Nanostring-Biostats/CosMx-Analysis-Scratch-Space/labels/napari%20series){target="_blank"} using the `napari series` label. 

--ERM

